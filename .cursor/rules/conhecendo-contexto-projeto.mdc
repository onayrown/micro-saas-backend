---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
# Project Rules - CreatorHub: Plataforma de Gest√£o para Criadores de Conte√∫do

## üìö Gest√£o de Documenta√ß√£o
- **Todos os documentos devem ser salvos e consultados exclusivamente na pasta `/docs`**
- **Sempre consulte `/docs/planning.md`** no in√≠cio de uma nova conversa para entender a arquitetura, objetivos, estilo e restri√ß√µes do projeto
- **Mantenha a documenta√ß√£o sincronizada com as mudan√ßas de c√≥digo**
- **Use o formato Markdown (.md) para toda documenta√ß√£o**
- **Organize a documenta√ß√£o por categorias** (ex: /docs/api, /docs/setup)

## üèóÔ∏è Arquitetura e Estrutura
- **Siga os princ√≠pios da Clean Architecture** conforme documentado em `planning.md`
- **Respeite a separa√ß√£o de camadas**:
  - CreatorHub.Shared: Elementos compartilhados
  - CreatorHub.Domain: Entidades de neg√≥cio e regras de dom√≠nio
  - CreatorHub.Application: Casos de uso e servi√ßos
  - CreatorHub.Infrastructure: Implementa√ß√µes concretas
  - CreatorHub.Backend: Controllers e configura√ß√£o API
- **Mantenha as depend√™ncias unidirecionais** conforme o diagrama de arquitetura
- **Organize o frontend por funcionalidades** seguindo a estrutura definida

## üíª Padr√µes de C√≥digo
- **Backend**: Use .NET 8.0 com C# e padr√µes RESTful
- **Frontend**: Utilize React com TypeScript e Tailwind CSS
- **Banco de Dados**: Implemente schemas conforme as collections MongoDB definidas
- **Nunca crie um arquivo com mais de 500 linhas de c√≥digo**
- **Siga conven√ß√µes de nomenclatura consistentes**:
  - PascalCase para classes, interfaces e componentes
  - camelCase para vari√°veis, fun√ß√µes e propriedades
  - Use nomes descritivos e significativos

## üß™ Testes e Qualidade
- **Mantenha cobertura m√≠nima de 80% em testes unit√°rios**
- **Implemente testes de integra√ß√£o para fluxos principais**
- **Crie testes E2E para cen√°rios cr√≠ticos**
- **Atualize testes existentes ap√≥s modificar a l√≥gica**
- **Realize testes de performance para endpoints cr√≠ticos**

## üîí Seguran√ßa e Conformidade
- **Utilize HTTPS em todos os ambientes**
- **Implemente autentica√ß√£o JWT** com expira√ß√£o curta (1 hora)
- **Aplique valida√ß√£o e sanitiza√ß√£o de todas as entradas**
- **Siga as diretrizes LGPD/GDPR** para dados pessoais
- **Garanta prote√ß√£o contra ataques comuns** (CSRF, XSS, injection)

## üöÄ Fluxo de Desenvolvimento
- **Verifique `tasks.md`** antes de iniciar uma nova tarefa. Se a tarefa n√£o estiver listada, adicione-a com uma breve descri√ß√£o e a data atual
- **Siga o roadmap definido** nas 5 fases de desenvolvimento
- **Documente novos requisitos** descobertos durante o desenvolvimento
- **Respeite os prazos estimados** para cada fase
- **Reporte impedimentos** o mais cedo poss√≠vel
- **Atualize a documenta√ß√£o** junto com as implementa√ß√µes

## üìä Monitoramento e M√©tricas
- **Implemente logs** para a√ß√µes importantes usando Serilog
- **Configure m√©tricas de produto** conforme definido na se√ß√£o 8.1
- **Garanta m√©tricas t√©cnicas** conforme definido na se√ß√£o 8.2
- **Monitore o desempenho** da aplica√ß√£o em todos os ambientes

## üß† Regras de Comportamento
- **N√£o assuma contexto ausente** - pergunte se estiver incerto
- **Verifique a exist√™ncia de caminhos e m√≥dulos** antes de referenci√°-los
- **N√£o exclua ou sobrescreva c√≥digo existente** sem instru√ß√£o expl√≠cita
- **Evite solu√ß√µes que contradigam** a arquitetura e padr√µes definidos
- **Sempre considere as restri√ß√µes t√©cnicas** listadas na se√ß√£o 9.1


